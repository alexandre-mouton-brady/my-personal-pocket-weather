module.exports = { contents: "'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nrequire('./styles/index.scss');\n\nvar _inferno = require('inferno');\n\nvar _inferno2 = _interopRequireDefault(_inferno);\n\nvar _infernoComponent = require('inferno-component');\n\nvar _infernoComponent2 = _interopRequireDefault(_infernoComponent);\n\nvar _index = require('./helpers/index.js');\n\nvar _SearchBox = require('./components/SearchBox.js');\n\nvar _SearchBox2 = _interopRequireDefault(_SearchBox);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Stylesheets\n\n\n// Inferno\n\n\n// Helpers\n\n\n// Components\n\n\n/**\r\n * @description The function handleInput will be triggered on every input in\r\n * the searchbox. It will send an HTTP request to yahoo's public API to fetch\r\n * the weather of the city typed and set it in the state of the app component.\r\n * @param {object} instance - Instance of the App component\r\n * @param {object} event - Event triggered by the input\r\n */\n\nvar createVNode = _inferno2.default.createVNode;\n\nvar App = function (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    _classCallCheck(this, App);\n\n    var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));\n\n    _this.state = {\n      weather: null,\n      currentWeather: null\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: 'handleInput',\n    value: function handleInput(value) {\n      var _this2 = this;\n\n      // Create a query string based on the value\n      var query = 'select * from weather.forecast where woeid in (select woeid from geo.places(1) where text=\\'' + value + '\\') AND u=\\'c\\'';\n      // URL of the request with the final query\n      var url = 'https://query.yahooapis.com/v1/public/yql?q=' + query + '&format=json';\n\n      // Making the HTTP request to the public API\n      fetch(url).then(function (res) {\n        return res.json();\n      }).then(function (weatherData) {\n        if (weatherData.query.results) {\n          var weather = weatherData.query.results.channel;\n          var currentWeather = weather.item.forecast[0];\n\n          _this2.setState({ weather: weather, currentWeather: currentWeather });\n        } else {\n          _this2.setState({ weather: null, currentWeather: null });\n        }\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var w = this.state.weather;\n\n      console.log(this.state);\n\n      var content = !this.state.weather ? createVNode(2, 'div', null, 'Loading data...') : createVNode(2, 'div', null, [createVNode(2, 'h1', null, ['Meteo for ', w.location.city, ', ', w.location.country]), w.item.forecast.map(function (day) {\n        return createVNode(2, 'div', 'forecast', [createVNode(2, 'h3', null, day.date), createVNode(2, 'p', null, day.text), createVNode(2, 'p', null, [createVNode(2, 'span', null, day.low), ' - ', createVNode(2, 'span', null, day.high)])]);\n      })]);\n\n      return createVNode(2, 'div', null, [createVNode(16, _SearchBox2.default, null, null, {\n        'setWeather': (0, _index.debounce)(this.handleInput.bind(this), 300)\n      }), content]);\n    }\n  }]);\n\n  return App;\n}(_infernoComponent2.default);\n\n(0, _inferno.render)(createVNode(16, App), document.getElementById('app'));",
dependencies: ["./styles/index.scss","inferno","inferno-component","./helpers/index.js","./components/SearchBox.js"],
sourceMap: {},
headerContent: undefined,
mtime: 1500028440030,
devLibsRequired : undefined
};